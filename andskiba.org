* Load Starter Kit bundles
#+begin_src emacs-lisp
  (starter-kit-load "org")
  (starter-kit-load "yasnippet")
  (starter-kit-load "lisp")
  (starter-kit-load "misc-recommended")
#+end_src
* General settings
#+begin_src emacs-lisp
  (scroll-bar-mode nil)
  (setq-default tab-width 4)
  (setq tab-width 4)
  (setq require-final-newline 'ask)
  (setq-default fill-column 78)

  (column-number-mode)

  (prefer-coding-system 'utf-8-unix)
#+end_src
* Aliases
#+begin_src emacs-lisp
(defalias 'qrr 'query-replace-regexp)
#+end_src

* Defuns
** General
In this section there are generally useful function definiations.

#+begin_src emacs-lisp
  (defun is-windows ()
    "Returns T if we are on a Windows system or NIL otherwise."
    (or (eq system-type 'windows)
        (eq system-type 'windows-nt)))
#+end_src

** Adding ELPA packages to load-path if necessary
#+begin_src emacs-lisp
  (defun add-package-to-load-path (&rest packages)
    "Add a path of a package from ELPA to the load-path.

  Takes any number of packages as arguments.

  Some packages don't have autoloading setup or cannot be required
  for some reason so I explicitly add their directories to the
  load-path and require them."
    (mapc (lambda (package)
            (let ((p (if (symbolp package) (symbol-name package) package)))
              (add-to-list
               'load-path
               (first (file-expand-wildcards
                       (concat starter-kit-dir "elpa/" p "-*"))))))
          packages))
#+end_src

** Insert my name and email
#+begin_src emacs-lisp
  (defun as/name ()
    "Inert my name and email."
    (interactive)
    (insert "Andrzej Skiba <jedrek@metaelement.com>"))
#+end_src
** Code commenting utilities
#+begin_src emacs-lisp
  (defun as/comment-section ()
    (interactive)
    (flet ((insert-dashes (number)
             (dotimes (i number)
               (insert "-"))))
      (save-excursion
       (beginning-of-line)
       (funcall indent-line-function)
       (let* ((beg (current-column))
              (end (progn (end-of-line) (current-column)))
              (string-width (- end beg))
              (dash-number (/ (- 80 beg string-width 6) 2)))
         (beginning-of-line)
         (funcall indent-line-function)
         (insert "/*")
         (insert-dashes dash-number)
         (insert " ")
         (end-of-line)
         (insert " ")
         (insert-dashes dash-number)
         (when (oddp string-width) (insert "-"))
         (insert "*/")))))

  (defun as/configurable-comment-section (leading-str fill-char)
    "Turns the current line into a comment section."
    (interactive "sLeading string: \ncFill character: ")
    (flet ((insert-times (char number)
                         (dotimes (i number)
                           (insert char)))
           (string-reverse (str)
                           "Reverse the str where str is a string"
                           (apply #'string
                                  (reverse
                                   (string-to-list str)))))
      (save-excursion
        (beginning-of-line)
        (let* ((beg (current-column))
               (end (progn (end-of-line) (current-column)))
               (string-width (- end beg))

               (lead-end (y-or-n-p "End with lead?"))
               (lead-length (length leading-str))
               (fill-number (/ (- 80
                                  string-width
                                  (* lead-length (if lead-end 2 1))
                                  2) ; spaces
                               2))
               (total-odd (oddp (+ (* (if lead-end 2 1) lead-length)
                                   (* 2 fill-number)
                                   2))))
          (beginning-of-line)
          (insert leading-str)
          (insert-times fill-char fill-number)
          (insert " ")
          (end-of-line)
          (insert " ")
          (insert-times fill-char fill-number)
          (when total-odd (insert fill-char))
          (when lead-end (insert (string-reverse leading-str)))))))


  (defun as/space-string (beginning end)
    "Add a space after each character to make the string stand ont.
  Useful for making sections of code stand out."
    (interactive "r")
    (save-excursion
     (goto-char beginning)
     (dotimes (i (- end beginning 1))
       (forward-char)
       (insert-char ?\  1))))

  (defun as/comment-box (beg end)
    "Do some fancy commenting"
    (interactive "r")
    (flet ((draw-line (&optional columns)
             (let ((dashes ""))
               (dotimes (i (- (if columns columns 80) 2))
                 (setq dashes (concat dashes "-")))
               (insert "//" dashes "\n"))))
      (save-restriction
       ;; comment the region with one line comments
       (goto-char beg)
       (beginning-of-line)
       (while (< (point) end)
              (insert "// ")
              (forward-line)
              (beginning-of-line))

       ;; draw bottom line
       (end-of-line)
       (draw-line)

       ;; draw top line
       (goto-char beg)
       (draw-line))))

  (defun as/function-comment ()
    "Insert a box for a function comment."
    (interactive)
    (setq last-kbd-macro
          [tab ?/ ?* ?* return tab ?* tab return ?* ?/ ?\C-p ? ])
    (call-last-kbd-macro))
#+end_src
** Searching online documentations
#+begin_src emacs-lisp
  (defun as/prelude-google ()
    "Googles a query or region if any."
    (interactive)
    (browse-url
     (concat
      "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
      (if mark-active
          (buffer-substring (region-beginning) (region-end))
          (read-string "Google: ")))))

  (defmacro def-as-doc-search (fn-name def-prompt prompt url)
    `(defun ,fn-name (str)
      (interactive
       (let ((str (thing-at-point 'symbol))
             (enable-recursive-minibuffers t))
         (list (read-from-minibuffer
                (if str
                    (format ,def-prompt str) ,prompt)
                str))))
      (browse-url (format ,url str))))

  (def-as-doc-search as/php-doc-search
    "PHP docs search (default %s): "
    "PHP docs search: "
    "http://www.php.net/manual-lookup.php?pattern=%s&lang=en&scope=quickref")

  (def-as-doc-search as/mysql-doc-search
    "MySQL docs search (default %s): "
    "MySQL docs search: "
    "http://search.oracle.com/search/search?q=%s&group=MySQL")

  (def-as-doc-search as/mdn-doc-search
    "MDN search (default %s): "
    "MDN search: "
    "https://developer.mozilla.org/en-US/search?q=%s")

  (def-as-doc-search as/merriam-webster-search
    "M-W dictionary (default %s): "
    "M-W dictionary: "
    "http://www.merriam-webster.com/dictionary/%s")
#+end_src
** Themes
I like to switch between my favorite themes easily.
#+begin_src emacs-lisp
  (defvar *as/theme-packages* '(tango-2-theme
                                zenburn-theme
                                ample-zen-theme
                                anti-zenburn-theme
                                assemblage-theme
                                birds-of-paradise-plus-theme
                                bubbleberry-theme
                                busybee-theme
                                calmer-forest-theme
                                cherry-blossom-theme
                                clues-theme
                                cyberpunk-theme
                                dakrone-theme
                                darkburn-theme
                                deep-thought-theme
                                django-theme
                                espresso-theme
                                flatland-theme
                                gandalf-theme
                                github-theme
                                grandshell-theme
                                gruvbox-theme
                                hemisu-theme
                                heroku-theme
                                inkpot-theme
                                ir-black-theme
                                jujube-theme
                                late-night-theme
                                leuven-theme
                                moe-theme
                                molokai-theme
                                monokai-theme
                                mustang-theme
                                naquadah-theme
                                noctilux-theme
                                nzenburn-theme
                                obsidian-theme
                                purple-haze-theme
                                qsimpleq-theme
                                remember-theme
                                reverse-theme
                                soft-morning-theme
                                solarized-theme
                                soothe-theme
                                spacegray-theme
                                steady-theme
                                subatomic-theme
                                sunny-day-theme
                                tango-plus-theme
                                tommyh-theme
                                toxi-theme
                                tron-theme
                                tronesque-theme
                                twilight-theme
                                ujelly-theme
                                underwater-theme
                                waher-theme
                                zen-and-art-theme
                                zenburn-theme
                                tango-2-theme))

  (dolist (theme *as/theme-packages*)
    (starter-kit-install-if-needed theme))

  (defvar *as/themes* [tango-2
                       deeper-blue
                       whiteboard
                       adwaita
                       tsdh-dark
                       tsdh-light])
  (defvar *as/current-theme* 0)

  (defun as/load-current-theme ()
    "Load the current theme from the list of my favorite themes."
    (let* ((theme-def (elt *as/themes* *as/current-theme*))
           (theme-name (if (listp theme-def) (car theme-def) theme-def))
           (theme-func (if (listp theme-def) (cdr theme-def) (lambda () nil))))
      (if (member theme-name custom-known-themes)
          (enable-theme theme-name)
          (load-theme theme-name))
      (funcall theme-func)))

  (defun as/unload-current-theme ()
    (disable-theme (elt *as/themes* *as/current-theme*)))

  (defun as/next-theme ()
    "Load next theme in the *as/themes* list. Allows for easy
  switching between favourite themes without the need to remember
  names."
    (interactive)
    (let ((next (mod (1+ *as/current-theme*) (length *as/themes*))))
      (as/unload-current-theme)
      (setq *as/current-theme* next)
      (as/load-current-theme)))

  ;; Add theme directories to custom-theme-load-path
  (let* ((theme-dir (concat starter-kit-dir "themes/"))
         (solarized-dir (concat theme-dir "emacs-color-theme-solarized/")))
    (add-to-list 'custom-theme-load-path theme-dir)

    ;; special case for solarized theme
    (add-to-list 'load-path solarized-dir)
    (add-to-list 'custom-theme-load-path solarized-dir))

  (global-set-key (kbd "C-c t") 'as/next-theme)

  (as/load-current-theme)
#+end_src

** Other
#+begin_src emacs-lisp
  (defun as/image-size ()
    (interactive)
    (let ((dim (image-size (create-image (first (dired-get-marked-files))) t)))
      (message "Width: %d, Height: %d" (car dim) (cdr dim))))
#+end_src
* Package configurations
** Semantic
#+begin_src emacs-lisp
  (setq semantic-default-submodes
        '(global-semanticdb-minor-mode

          global-semantic-idle-scheduler-mode
          global-semantic-idle-summary-mode

          global-semantic-highlight-func-mode
          global-semantic-stickyfunc-mode
          global-semantic-decoration-mode

          global-semantic-mru-bookmark-mode))
  (semantic-mode 1)

  (add-to-list 'load-path (concat starter-kit-dir "grammars/"))

#+end_src
** Org
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c b") 'org-iswitchb)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)"  "|"
                    "DONE(d)" "CANCELLED(c)" "DEFERRED(f)")))
  (setq org-tag-alist
        '(("Work" . ?w) ("project" . ?p) ("programming" . ?g)
          ("reading" . ?r) ("school" . ?s)))
  (setq org-log-done 'time)
  (setq org-hide-leading-stars t)
  (setq org-startup-folded t)

  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)    ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

  ;; org-babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (ditaa . t)
     (dot . t)
     (emacs-lisp . t)
     (gnuplot . nil)
     (haskell . nil)
     (latex . t)
     (ocaml . nil)
     (perl . t)
     (python . t)
     (ruby . t)
     (screen . nil)
     (sh . t)
     (sql . nil)
     (sqlite . nil)))
#+end_src
** ack!
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'ack-and-a-half)
#+end_src

** Projectile
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'projectile)
  (projectile-global-mode)
#+end_src

** Autocomplete
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'auto-complete)
  (require 'auto-complete-config)
  (ac-config-default)
#+end_src

** Company
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'company)
  (require 'company)
  (global-company-mode t)
#+end_src

** aHg
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'ahg)
  (add-package-to-load-path 'ahg)
  (require 'ahg)
  (global-set-key (kbd "C-c h g s") 'ahg-status)
#+end_src
** PHP
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'php-mode)

  (require 'wisent-php)
#+end_src
** JavaScript
#+begin_src emacs-lisp
  (setq js-indent-level 2)
#+end_src
** CoffeeScript
#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed 'coffee-mode)
#+END_SRC

** Yaml
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'yaml-mode)
  (setq yaml-indent-offset 2)
#+end_src

** IDO
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'ido-ubiquitous)
  (starter-kit-install-if-needed 'idomenu)

  (add-hook 'ido-setup-hook 'ido-my-keys)

  (defun ido-my-keys ()
    "Add my keybindings for ido."
    (define-key ido-completion-map "\C-n" 'ido-next-match)
    (define-key ido-completion-map "\C-p" 'ido-prev-match))
#+end_src
** YASnippet
YAS is already loaded through the Starter Kit bundle so here I only
add dropdown support and my own snippets directory.
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'dropdown-list)
  (require 'dropdown-list) ; required for dropdown-prompt to work
  (setq yas/prompt-functions '(yas/dropdown-prompt
                               yas/completing-prompt
                               yas/ido-prompt
                               yas/no-prompt))
  (push "~/.emacs.d/snippets" yas-snippet-dirs)
#+end_src
** Markdown
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'markdown-mode)
  (starter-kit-install-if-needed 'markdown-mode+)
#+end_src
** Htmlize
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'htmlize)
#+end_src
** CSS
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'less-css-mode)
  (starter-kit-install-if-needed 'rainbow-mode)

  (defun turn-on-rainbow () (rainbow-mode t))
  (add-hook 'css-mode-hook 'turn-on-rainbow)
  (add-hook 'less-css-mode-hook 'turn-on-rainbow)
#+end_src
** SVN
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'psvn)
#+end_src

** Aspell
We should use Aspell but only on windows.

#+begin_src emacs-lisp
  (when (is-windows)
    (add-to-list 'exec-path "C:/Program Files (x86)/Aspell/bin/")
    (setq ispell-program-name "aspell"))
#+end_src

* Frame and fonts
#+begin_src emacs-lisp
  (defvar *as/font-string*
    (cond
     ((eq system-type 'gnu/linux) "DejaVu Sans Mono-11")
     ((is-windows) "Consolas-11")))

  (setq initial-frame-alist
        `((vertical-scroll-bars . nil)))
  (setq default-frame-alist
        `((font . ,*as/font-string*)
          (vertical-scroll-bars . nil)))

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
#+end_src

* Key bindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c s p") 'as/php-doc-search)
  (global-set-key (kbd "C-c s m") 'as/mysql-doc-search)
  (global-set-key (kbd "C-c s j") 'as/mdn-doc-search)
  (global-set-key (kbd "C-c s g") 'as/prelude-google)
  (global-set-key (kbd "C-c s d") 'as/merriam-webster-search)

  (global-set-key (kbd "C-c s f") 'flymake-mode)

  (global-set-key (kbd "C-c s c b") 'as/comment-box)
  (global-set-key (kbd "C-c s c f") 'as/function-comment)

  (global-set-key (kbd "<f11>") 'magit-status)
  (global-set-key (kbd "<f10>") 'menu-bar-mode)
#+end_src

* Server
#+begin_src emacs-lisp
  (server-start)
#+end_src

